services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: people-org-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-people_and_organizations}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - people-org-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB:-people_and_organizations}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    # No exposed ports for security - only internal network access
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for Caching (Production)
  redis:
    image: redis:7-alpine
    container_name: people-org-redis-prod
    volumes:
      - redis_data:/data
    networks:
      - people-org-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'
    # No exposed ports for security - only internal network access
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Spring Boot API Application (Production)
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: people-org-api-prod
    environment:
      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-people_and_organizations}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_JPA_HIBERNATE_DDL_AUTO: validate
      SPRING_JPA_SHOW_SQL: false

      # Redis Configuration
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD}

      # OAuth2 Configuration
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_CLIENT_ID: ${OAUTH2_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_DEFAULT_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_DEFAULT_ISSUER_URI: ${OAUTH2_ISSUER_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_DEFAULT_AUTHORIZATION_URI: ${OAUTH2_AUTHORIZATION_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_DEFAULT_TOKEN_URI: ${OAUTH2_TOKEN_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_DEFAULT_USER_INFO_URI: ${OAUTH2_USERINFO_URI}
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_DEFAULT_JWK_SET_URI: ${OAUTH2_JWK_SET_URI}

      # Application Configuration
      SPRING_PROFILES_ACTIVE: production
      LOGGING_LEVEL_ORG_ERP_MICROSERVICES: INFO
      LOGGING_LEVEL_ROOT: WARN

      # Cloud Configuration
      SPRING_CLOUD_VAULT_ENABLED: ${VAULT_ENABLED:-false}
      SPRING_CLOUD_CONFIG_ENABLED: ${CONFIG_SERVER_ENABLED:-false}
      SPRING_CLOUD_VAULT_URI: ${VAULT_URI}
      SPRING_CLOUD_VAULT_TOKEN: ${VAULT_TOKEN}

      # JVM Configuration for Production
      JAVA_OPTS: "-Xms1g -Xmx2g -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+UseG1GC -XX:+UseStringDeduplication"

      # Security
      SERVER_SSL_ENABLED: ${SSL_ENABLED:-false}
      SERVER_SSL_KEY_STORE: ${SSL_KEYSTORE_PATH}
      SERVER_SSL_KEY_STORE_PASSWORD: ${SSL_KEYSTORE_PASSWORD}
      SERVER_SSL_KEY_STORE_TYPE: ${SSL_KEYSTORE_TYPE:-PKCS12}

      # Actuator Security
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when-authorized
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
    ports:
      - "${API_PORT:-8080}:8080"
    networks:
      - people-org-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    restart: always
    deploy:
      resources:
        limits:
          memory: 2.5G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: people-org-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - people-org-network
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
        reservations:
          memory: 64M
          cpus: '0.1'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

networks:
  people-org-network:
    driver: bridge
    name: people-org-network-prod

volumes:
  postgres_data:
    driver: local
    name: people-org-postgres-data-prod
  redis_data:
    driver: local
    name: people-org-redis-data-prod
