name: CD - Continuous Deployment

on:
  push:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  JAVA_VERSION: '21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/people-organizations-api

jobs:
  # Job 1: Build and test before deployment
  pre-deployment:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      short-sha: ${{ steps.version.outputs.short-sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: gradle/actions/setup-gradle@v4

      - name: Run tests
        run: ./gradlew test --no-daemon

      - name: Generate version info
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
          else
            VERSION="main-$(git rev-parse --short HEAD)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "short-sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

  # Job 2: Build and push Docker images
  build-and-push:
    name: Build & Push Container Images
    runs-on: ubuntu-latest
    needs: pre-deployment

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ needs.pre-deployment.outputs.short-sha }}
          path: sbom.spdx.json
          retention-days: 30

      - name: Scan image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.version }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload vulnerability scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Job 3: Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-push]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')

    environment:
      name: staging
      url: https://staging-api.people-organizations.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying to staging environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.version }}"

          # Placeholder for actual deployment logic
          # This would typically involve:
          # - Updating Kubernetes manifests
          # - Applying configurations
          # - Running database migrations
          # - Health checks

          echo "‚úÖ Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "üß™ Running smoke tests against staging"

          # Placeholder for smoke tests
          # This would typically involve:
          # - API health checks
          # - Database connectivity tests
          # - Basic functionality verification

          echo "‚úÖ Smoke tests passed"

      - name: Notify deployment
        run: |
          echo "üì¢ Staging deployment notification"
          echo "Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "Commit: ${{ needs.pre-deployment.outputs.short-sha }}"

  # Job 4: Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-push]
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')

    environment:
      name: production
      url: https://api.people-organizations.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-deployment.outputs.version }}"

          # Placeholder for actual deployment logic
          # This would typically involve:
          # - Blue/green deployment strategy
          # - Database migrations with rollback capability
          # - Load balancer updates
          # - Monitoring setup

          echo "‚úÖ Production deployment completed"

      - name: Run production health checks
        run: |
          echo "üè• Running production health checks"

          # Placeholder for comprehensive health checks
          # This would typically involve:
          # - API endpoint verification
          # - Database connectivity
          # - External service connectivity
          # - Performance benchmarks

          echo "‚úÖ Production health checks passed"

      - name: Notify production deployment
        run: |
          echo "üì¢ Production deployment notification"
          echo "Version: ${{ needs.pre-deployment.outputs.version }}"
          echo "Commit: ${{ needs.pre-deployment.outputs.short-sha }}"

  # Job 5: Database migrations (separate job for better control)
  database-migration:
    name: Database Migration
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'

    strategy:
      matrix:
        include:
          - environment: staging
          - environment: production

    environment:
      name: ${{ matrix.environment }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: gradle/actions/setup-gradle@v4

      - name: Run database migrations
        run: |
          echo "üóÑÔ∏è Running database migrations for ${{ matrix.environment }}"

          # Placeholder for actual migration logic
          # This would typically involve:
          # - ./gradlew :database:flywayMigrate -Penvironment=${{ matrix.environment }}
          # - Backup verification
          # - Migration validation

          echo "‚úÖ Database migrations completed for ${{ matrix.environment }}"

  # Job 6: Post-deployment verification
  post-deployment:
    name: Post-deployment Verification
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, database-migration]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')

    steps:
      - name: Verify deployment
        run: |
          echo "üîç Post-deployment verification"

          # Determine which environment was deployed
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            ENVIRONMENT="production"
            URL="https://api.people-organizations.example.com"
          else
            ENVIRONMENT="staging"
            URL="https://staging-api.people-organizations.example.com"
          fi

          echo "Environment: $ENVIRONMENT"
          echo "URL: $URL"

          # Placeholder for comprehensive verification
          # This would typically involve:
          # - API endpoint tests
          # - Data integrity checks
          # - Performance monitoring
          # - Alert system verification

          echo "‚úÖ Post-deployment verification completed"

      - name: Update deployment status
        run: |
          echo "üìä Updating deployment status"
          echo "Deployment completed successfully"

          # This would typically update:
          # - Monitoring dashboards
          # - Status pages
          # - Team notifications

  # Job 7: Rollback capability (manual trigger)
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'

    steps:
      - name: Rollback deployment
        run: |
          echo "üîÑ Rolling back deployment"

          # Placeholder for rollback logic
          # This would typically involve:
          # - Reverting to previous container image
          # - Database rollback (if applicable)
          # - Load balancer updates
          # - Notification systems

          echo "‚úÖ Rollback completed"
